version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: cms-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-cms_db}
      POSTGRES_USER: ${DB_USER:-cms_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-cms_password}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - cms-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-cms_user} -d ${DB_NAME:-cms_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cms-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      SPRING_PROFILE: ${SPRING_PROFILE:-dev}
      DB_URL: jdbc:postgresql://postgres:5432/${DB_NAME:-cms_db}
      DB_USER: ${DB_USER:-cms_user}
      DB_PASSWORD: ${DB_PASSWORD:-cms_password}
      JWT_SECRET: ${JWT_SECRET}
    ports:
      - "${APP_PORT:-8080}:8080"
    volumes:
      - ./logs:/app/logs
    networks:
      - cms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    driver: local

networks:
  cms-network:
    driver: bridge
